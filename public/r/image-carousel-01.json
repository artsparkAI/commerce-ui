{
  "name": "image-carousel-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-radio-group"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { type EmblaOptionsType } from \"embla-carousel\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nconst PLACEHOLDER_IMAGES = [\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n  \"https://placehold.co/600x400\",\n];\n\ntype ThumbPropType = {\n  selected: boolean;\n  index: number;\n  onClick: () => void;\n  imgUrl: string;\n};\n\nconst getAspectRatioClass = (ratio?: string) => {\n  switch (ratio) {\n    case \"square\":\n      return \"aspect-square\"; // 1:1\n    case \"video\":\n      return \"aspect-video\"; // 16:9\n    case \"wide\":\n      return \"aspect-[4/3]\"; // 4:3\n    case \"auto\":\n      return \"aspect-auto\"; // Natural image aspect ratio\n    default:\n      return \"aspect-[4/3]\"; // Default 4:3\n  }\n};\n\nconst ImageContainer: React.FC<{\n  image: string;\n  alt: string;\n  fit?: \"cover\" | \"contain\" | \"fill\";\n  aspectRatio?: string;\n}> = ({ image, alt, fit = \"cover\", aspectRatio }) => {\n  return (\n    <div\n      className={cn(\n        \"relative w-full overflow-hidden rounded-lg bg-gray-100\",\n        getAspectRatioClass(aspectRatio)\n      )}\n    >\n      <img\n        src={image}\n        alt={alt}\n        className={cn(\n          \"absolute inset-0 h-full w-full\",\n          fit === \"contain\" && \"object-contain\",\n          fit === \"cover\" && \"object-cover\",\n          fit === \"fill\" && \"object-fill\"\n        )}\n      />\n    </div>\n  );\n};\n\nconst Thumb: React.FC<ThumbPropType> = (props) => {\n  const { selected, index, onClick, imgUrl } = props;\n\n  return (\n    <div\n      className={cn(\n        \"min-w-0 flex-[0_0_22%] pl-3 transition-opacity duration-200 sm:flex-[0_0_15%]\",\n        selected ? \"opacity-100\" : \"opacity-50 hover:opacity-70\"\n      )}\n    >\n      <button\n        onClick={onClick}\n        className=\"relative w-full cursor-pointer touch-manipulation appearance-none overflow-hidden rounded-md border-0 bg-transparent p-0\"\n        type=\"button\"\n      >\n        <ImageContainer\n          image={imgUrl}\n          alt={`Thumbnail ${index + 1}`}\n          fit=\"cover\"\n          aspectRatio=\"square\"\n        />\n      </button>\n    </div>\n  );\n};\n\ninterface ImageCarousel_01Props extends React.HTMLAttributes<HTMLDivElement> {\n  images: string[];\n  opts?: EmblaOptionsType;\n  showControls?: boolean;\n  imageFit?: \"cover\" | \"contain\" | \"fill\";\n  aspectRatio?: \"square\" | \"video\" | \"wide\" | \"auto\";\n}\n\nconst ImageCarousel_01: React.FC<ImageCarousel_01Props> = ({\n  images = PLACEHOLDER_IMAGES,\n  opts,\n  showControls = true,\n  className,\n  imageFit = \"contain\",\n  aspectRatio = \"wide\",\n  ...props\n}) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({\n    ...opts,\n    axis: \"x\",\n  });\n\n  const [emblaThumbsRef, emblaThumbsApi] = useEmblaCarousel({\n    containScroll: \"keepSnaps\",\n    dragFree: true,\n    axis: \"x\",\n  });\n\n  const onThumbClick = useCallback(\n    (index: number) => {\n      if (!emblaApi || !emblaThumbsApi) return;\n      emblaApi.scrollTo(index);\n      emblaThumbsApi.scrollTo(index);\n    },\n    [emblaApi, emblaThumbsApi]\n  );\n\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext]\n  );\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi || !emblaThumbsApi) return;\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n    emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());\n    setCanScrollPrev(emblaApi.canScrollPrev());\n    setCanScrollNext(emblaApi.canScrollNext());\n  }, [emblaApi, emblaThumbsApi]);\n\n  useEffect(() => {\n    if (!emblaApi || !emblaThumbsApi) return;\n\n    onSelect();\n    emblaApi.on(\"reInit\", onSelect);\n    emblaApi.on(\"select\", onSelect);\n\n    return () => {\n      emblaApi.off(\"reInit\", onSelect);\n      emblaApi.off(\"select\", onSelect);\n    };\n  }, [emblaApi, emblaThumbsApi, onSelect]);\n\n  return (\n    <div\n      className={cn(\"relative w-full max-w-3xl\", className)}\n      role=\"region\"\n      aria-roledescription=\"carousel\"\n      onKeyDownCapture={handleKeyDown}\n      {...props}\n    >\n      <div className=\"relative\" aria-label=\"Image carousel controls\">\n        <div ref={emblaRef} className=\"overflow-hidden rounded-lg\">\n          <div className=\"-ml-4 flex\">\n            {images?.map((image, index) => (\n              <div\n                key={index}\n                className=\"min-w-0 shrink-0 grow-0 basis-full pl-4\"\n                role=\"group\"\n                aria-roledescription=\"slide\"\n              >\n                <ImageContainer\n                  image={image}\n                  alt={`Slide ${index + 1}`}\n                  fit={imageFit}\n                  aspectRatio={aspectRatio}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {showControls && (\n          <>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute left-[2%] top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 backdrop-blur-sm hover:bg-background disabled:opacity-50 dark:bg-background/80 hover:dark:bg-background\"\n              disabled={!canScrollPrev}\n              onClick={scrollPrev}\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Previous slide</span>\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute right-[2%] top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 backdrop-blur-sm hover:bg-background disabled:opacity-50 dark:bg-background/80 hover:dark:bg-background\"\n              disabled={!canScrollNext}\n              onClick={scrollNext}\n            >\n              <ArrowRight className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Next slide</span>\n            </Button>\n          </>\n        )}\n      </div>\n\n      <div className=\"mt-4\">\n        <div className=\"overflow-hidden\" ref={emblaThumbsRef}>\n          <div className=\"-ml-3 flex gap-2\">\n            {images?.map((image, index) => (\n              <Thumb\n                key={index}\n                onClick={() => onThumbClick(index)}\n                selected={index === selectedIndex}\n                index={index}\n                imgUrl={image}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageCarousel_01;\n",
      "path": "/components/commerce-ui/image-carousel/image-carousel-01.tsx",
      "target": "/components/commerce-ui/image-carousel-01.tsx"
    }
  ]
}