{
  "name": "variant-color-selector-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-radio-group"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface VariantItem {\n  id: string;\n  value: string;\n  color: string;\n  label: string;\n}\n\nconst variants: VariantItem[] = [\n  { id: \"color-black\", value: \"black\", color: \"#000000\", label: \"Black\" },\n  { id: \"color-white\", value: \"white\", color: \"#FFFFFF\", label: \"White\" },\n  { id: \"color-red\", value: \"red\", color: \"#FF0000\", label: \"Red\" },\n  { id: \"color-blue\", value: \"blue\", color: \"#0000FF\", label: \"Blue\" },\n  { id: \"color-green\", value: \"green\", color: \"#00FF00\", label: \"Green\" },\n  { id: \"color-yellow\", value: \"yellow\", color: \"#FFFF00\", label: \"Yellow\" },\n  { id: \"color-purple\", value: \"purple\", color: \"#800080\", label: \"Purple\" },\n];\n\nfunction VariantColorSelector_01({ className }: { className?: string }) {\n  return (\n    <fieldset className={cn(\"space-y-4\", className)}>\n      <legend className=\"sr-only\">Select a color</legend>\n      <RadioGroupPrimitive.Root\n        className=\"flex flex-wrap gap-3\"\n        defaultValue=\"black\"\n      >\n        {variants.map((variant) => (\n          <label\n            key={variant.id}\n            className=\"relative flex cursor-pointer flex-col items-center gap-2\"\n          >\n            <RadioGroupPrimitive.Item\n              value={variant.value}\n              className={cn(\n                \"aspect-square size-6 rounded-full border-2 ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                \"has-[[data-state=checked]]:ring-4\",\n                \"has-[[data-state=checked]]:border-0\"\n              )}\n              style={{\n                backgroundColor: variant.color,\n                color: getContrastYIQ(variant.color),\n              }}\n            >\n              <RadioGroupPrimitive.Indicator className=\"flex h-full items-center justify-center\">\n                <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n              </RadioGroupPrimitive.Indicator>\n            </RadioGroupPrimitive.Item>\n            <span className=\"text-sm font-medium leading-none text-foreground\">\n              {variant.label}\n            </span>\n          </label>\n        ))}\n      </RadioGroupPrimitive.Root>\n    </fieldset>\n  );\n}\n\nexport default VariantColorSelector_01;\n\n/**\n * Choose the best color for text based on the background color\n * Supports HEX and RGB colors\n * @param color\n * @returns\n */\nfunction getContrastYIQ(color: string) {\n  let r, g, b;\n\n  if (color.startsWith(\"#\")) {\n    // HEX color\n    color = color.replace(\"#\", \"\");\n    r = parseInt(color.substring(0, 2), 16);\n    g = parseInt(color.substring(2, 4), 16);\n    b = parseInt(color.substring(4, 6), 16);\n  } else if (color.startsWith(\"rgb\")) {\n    // RGB color\n    const rgbValues = color.match(/\\d+/g);\n    if (!rgbValues || rgbValues.length < 3) {\n      throw new Error(\"Invalid RGB color format\");\n    }\n    r = parseInt(rgbValues[0], 10);\n    g = parseInt(rgbValues[1], 10);\n    b = parseInt(rgbValues[2], 10);\n  } else {\n    throw new Error(\"Invalid color format\");\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq >= 128 ? \"black\" : \"white\";\n}\n",
      "path": "/components/commerce-ui/variant-color-selector/variant-color-selector-01.tsx",
      "target": "/components/commerce-ui/variant-color-selector-01.tsx"
    }
  ]
}